generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  name            String?
  projectTitle    String?  // Legacy field - will be migrated to first project
  currentProjectId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  tasks           Task[]   // Legacy relation
  staff           Staff[]  // Legacy relation
  projects        Project[]
  currentProject  Project? @relation("UserCurrentProject", fields: [currentProjectId], references: [id])
  shareLinks      ShareLink[]
}

model Project {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Multi-tenant relation
  userId    String
  owner     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Relations
  tasks     Task[]
  staff     Staff[]
  
  // Current project relation
  currentUsers User[] @relation("UserCurrentProject")
  
  @@index([userId])
}

model Task {
  id           String   @id @default(uuid())
  name         String
  mandays      Int      @default(1)
  jiraUrl      String?
  theme        String?
  dependencies String?  // JSON array of task IDs
  dueDate      DateTime?
  priority     String   @default("MEDIUM") // HIGH, MEDIUM, LOW
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Multi-tenant relation (legacy)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Project relation (new)
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  assignment Assignment?

  @@index([userId, theme])
  @@index([projectId, theme])
  @@index([theme])
  @@index([dueDate])
  @@index([priority])
}

model Staff {
  id          String       @id @default(uuid())
  name        String
  
  // Multi-tenant relation (legacy)
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Project relation (new)
  projectId   String?
  project     Project?     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  assignments Assignment[]

  @@index([userId, name])
  @@index([projectId, name])
}

model Assignment {
  taskId   String  @id
  task     Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  staffId  String?
  staff    Staff?  @relation(fields: [staffId], references: [id], onDelete: SetNull)
  position Decimal
  updatedAt DateTime @updatedAt

  @@index([staffId, position])
}

model ShareLink {
  id         String   @id @default(cuid())
  token      String   @unique
  type       String
  permission String
  viewParams String?
  expiresAt  DateTime?
  revokedAt  DateTime?
  createdAt  DateTime @default(now())
  
  // Multi-tenant relation
  createdBy  String
  user       User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  
  // Project relation (optional - for project-specific shares)
  projectId  String?
  
  snapshots  ShareSnapshot[]

  @@index([expiresAt])
  @@index([createdBy])
  @@index([projectId])
}

model ShareSnapshot {
  id       String   @id @default(cuid())
  shareId  String
  share    ShareLink @relation(fields: [shareId], references: [id], onDelete: Cascade)
  state    String
  csvUrl   String?
  jsonUrl  String?
  pngUrl   String?
  pdfUrl   String?
  createdAt DateTime @default(now())

  @@index([shareId])
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())

  @@index([email])
  @@index([token])
  @@index([expiresAt])
}
